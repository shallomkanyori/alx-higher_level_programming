==========================
Tests for 0-add_integer.py
==========================

This module has one function, ``add_integer() that simply adds two integers.

Numbers
=======

``add_integer`` returns the sum of its arguments after converting any float
argument to an integer. The second argument is optional

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(5, -3)
	2

	>>> add_integer(10)
	108

Floating-point values are converted to integers.
::
	>>> add_integer(2.9, 3.1)
	5

Non-Numbers
===========

If any argument is not a number, ``add_integer()`` raises a TypeError.

::
	>>> add_integer("2", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(2, [3, 4, 5])
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(2, {"1", "2", "3"})
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

If infinity is passed in, an OverflowError is raised.

::

	>>> add_integer(float("inf"))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

If NaN is passed in, a ValueError is raised.

	>>> add_integer(9, float("NaN"))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

``add_integer()`` takes at least one argument.

::

	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'
