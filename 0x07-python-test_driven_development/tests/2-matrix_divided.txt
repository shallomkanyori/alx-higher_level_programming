=============================
Tests for 2-matrix_divided.py
=============================

This module defines the function ``matrix_divided()`` that takes in a matrix
and a number and returns a copy of the matrix with each element divided by the
number and rounded to 2 decimal places. It also defines the helper function
``check_matrix()`` that checks if a given matrix is a list of lists of ints
and/or floats.


Correct arguments
=================

The first argument passed to ``matrix_divided()`` must be a list of equal
length lists of numbers. The second argument must be a number. Also,
``matric_divided()`` does not modify the original matrix and instead returns a
new matrix.

::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	... [-1, 2, 3],
	... [4, 5.4, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[-0.33, 0.67, 1.0], [1.33, 1.8, 2.0]]
	>>> print(matrix)
	[[-1, 2, 3], [4, 5.4, 6]]

	>>> matrix = []
	>>> new_matrix = matrix_divided(matrix, 9.5)
	>>> print(new_matrix)
	[]
	>>> print(matrix)
	[]
	>>> id(new_matrix) != id(matrix)
	True

	>>> matrix = [[], []]
	>>> new_matrix = matrix_divided(matrix, -5)
	>>> print(new_matrix)
	[[], []]
	>>> print(matrix)
	[[], []]
	>>> id(new_matrix) != id(matrix)
	True
	>>> id(new_matrix[0]) != id(matrix[0])
	True
	>>> id(new_matrix[1]) != id(matrix[1])
	True

Incorrect arguments
===================

If matrix is not a list of lists of integers or floats, ``matrix_divided()``
raises a TypeError.

::

	>>> matrix_divided(None, 10)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = {"1", "2", "3", "4"}
	>>> matrix_divided(matrix, "2")
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [
	... ["hello", 2, 3],
	... [4, 5, 6]
	... ]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [
	... [1, 2, 3],
	... [2.1, 5, 9.9],
	... [None]
	... ]
	>>> matrix_divided(matrix, None)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

If each row/list of the matrix are not of the same size, ``matrix_divided()``
raises a TypeError.

::

	>>> matrix = [
	... [1, 2, 3],
	... [2.1, 5, 9.9],
	... [4, 10]
	... ]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

	>>> matrix = [
	... [1, 2, 3],
	... [2.1, 5, 9.9],
	... []
	... ]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

If the second argument passed into ``matrix_divided()`` is not a number
(int or float), ``matrix_divided()`` raises a TypeError.

::

	>>> matrix = [
	... [1, 2, 3],
	... [2.1, -5, 9.9],
	... [4, 10, 50]
	... ]
	>>> matrix_divided(matrix, "hello")
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> matrix = [
	... [1, 2, 3],
	... [2.1, 5, 9.9],
	... [4, 10, -40]
	... ]
	>>> matrix_divided(matrix, None)
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> matrix = []
	>>> matrix_divided(matrix, {"1", "2", "3"})
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> matrix = [[], []]
	>>> matrix_divided(matrix, (1, 2))
	Traceback (most recent call last):
	TypeError: div must be a number

If the second argument is equal to 0, ``matrix_divided`` raises a
ZeroDivisionError.

::

	>>> matrix = [
	... [1, 2, 3],
	... [2.1, 5, -8]
	... ]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

	>>> matrix = []
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

	>>> matrix = [[], []]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
